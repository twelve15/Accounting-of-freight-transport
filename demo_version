import sqlite3
from tkinter import *
from tkinter import messagebox


class Transport:
    def __init__(self, id, name, payload_capacity, is_booked, length, width, height):
        self.id = id
        self.name = name
        self.payload_capacity = payload_capacity
        self.is_booked = is_booked
        self.length = length
        self.width = width
        self.height = height


class TransportManager:
    def __init__(self):
        self.connection = sqlite3.connect('transport.db')
        self.cursor = self.connection.cursor()
        self.create_table()

    def create_table(self):
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS transport
                            (id INTEGER PRIMARY KEY, name TEXT, payload_capacity REAL, 
                            is_booked INTEGER, length REAL, width REAL, height REAL)''')
        self.connection.commit()

    def add_tran(self, name, payload_capacity, length, width, height):
        self.cursor.execute("INSERT INTO transport (name, payload_capacity, is_booked, length, width, height) "
                            "VALUES (?, ?, 0, ?, ?, ?)",
                            (name, payload_capacity, length, width, height))
        self.connection.commit()
        messagebox.showinfo(title="Уведомление", message="Грузовой транспорт успешно добавлен.")

    def delete_tran(self, transport_id):
        self.cursor.execute("DELETE FROM transport WHERE id=?", (transport_id,))
        if self.cursor.rowcount == 0:
            return messagebox.showerror(title="Ошибка", message="Транспорт с указанным id не был найден")
        else:
            self.connection.commit()
            messagebox.showinfo(title="Уведомление", message="Грузовой транспорт успешно удален.")

    def preview_all_transport(self):
        self.cursor.execute("SELECT * FROM transport")
        transports = self.cursor.fetchall()
        transport_info = ""
        for transport in transports:
            transport_info += f"ID: {transport[0]}, Название: {transport[1]}, Грузоподъемность: {transport[2]}," \
                              f" Длина: {transport[4]}, Ширина: {transport[5]}, Высота: {transport[6]},"\
                              f"Забронирован: {'Да' if transport[3] else 'Нет'}\n"
        messagebox.showinfo(title="Грузовой транспорт", message=transport_info)

    def preview_transport_capacity(self, payload_capacity):
        self.cursor.execute("SELECT * FROM transport WHERE payload_capacity >= ?", (payload_capacity,))
        transports = self.cursor.fetchall()
        transport_info = ""
        for transport in transports:
            transport_info += f"ID: {transport[0]}, Название: {transport[1]}, Грузоподъемность: {transport[2]}," \
                              f" Длина: {transport[4]}, Ширина: {transport[5]}, Высота: {transport[6]}," \
                              f"Забронирован: {'Да' if transport[3] else 'Нет'}\n"
        messagebox.showinfo(title="Грузовой транспорт", message=transport_info)

    def preview_free_transport(self):
        self.cursor.execute("SELECT * FROM transport WHERE is_booked=0")
        transports = self.cursor.fetchall()
        transport_info = ""
        for transport in transports:
            transport_info += f"ID: {transport[0]}, Название: {transport[1]}, Грузоподъемность: {transport[2]}," \
                              f" Длина: {transport[4]}, Ширина: {transport[5]}, Высота: {transport[6]}\n"
        messagebox.showinfo(title="Свободный грузовой транспорт", message=transport_info)

    def booking(self, transport_id):
        self.cursor.execute("SELECT is_booked FROM transport WHERE id=?", (transport_id,))
        row = self.cursor.fetchone()
        if not row:
            return messagebox.showerror(title="Ошибка", message="Транспорт с указанным id не найден")
        elif row[0] == 1:
            return messagebox.showerror(title="Ошибка", message="Данный транспорт уже забронирован")
        else:
            self.cursor.execute("UPDATE transport SET is_booked=1 WHERE id=?", (transport_id,))
            self.connection.commit()
            messagebox.showinfo(title="Уведомление", message="Транспорт успешно забронирован.")

    def preview_booking_transport(self):
        self.cursor.execute("SELECT * FROM transport WHERE is_booked=1")
        transports = self.cursor.fetchall()
        transport_info = ""
        for transport in transports:
            transport_info += f"ID: {transport[0]}, Название: {transport[1]}, Грузоподъемность: {transport[2]}," \
                              f" Длина: {transport[4]}, Ширина: {transport[5]}, Высота: {transport[6]}\n"
        messagebox.showinfo(title="Забронированный грузовой транспорт", message=transport_info)

    def preview_transport_size(self, payload_capacity, length, width, height):
        self.cursor.execute("SELECT * FROM transport WHERE payload_capacity >= ? "
                            "AND length >= ? AND width >= ? AND height >= ? AND is_booked=0",
                            (payload_capacity, length, width, height))
        transports = self.cursor.fetchall()
        transport_info = ""
        for transport in transports:
            transport_info += f"ID: {transport[0]}, Название: {transport[1]}, Грузоподъемность: {transport[2]}, " \
                              f"Длина: {transport[4]}, Ширина: {transport[5]}, Высота: {transport[6]}, " \
                              f"Забронирован: {'Да' if transport[3] else 'Нет'}\n"
        messagebox.showinfo(title="Грузовой транспорт", message=transport_info)

    def close(self):
        self.cursor.close()
        self.connection.close()


class MakeWindow:
    def __init__(self):
        self.manager = TransportManager()
        self.window = Tk()
        self.window.resizable(height=False, width=False)
        self.window.title("Учет грузового транспорта")
        self.window.iconbitmap("C:\\Users\\user\\Downloads\\ico.ico")
        self.window.geometry("600x400")
        self.window['bg'] = '#00ffff'
        self.create_buttons()

    def create_buttons(self):
        self.clear_page()
        add_button = Button(self.window, text="Добавить транспорт", font='Comfortaa 12', bg='#00ffff',
                            command=self.preview_add_transport)
        add_button.pack(pady=5)
        view_all_button = Button(self.window, text="Показать весь транспорт", font='Comfortaa 12', bg='#00ffff',
                                 command=self.preview_all_transport)
        view_all_button.pack(pady=5)
        view_capacity_button = Button(self.window, text="Просмотреть транспорт по грузоподъемности",
                                         font='Comfortaa 12', bg='#00ffff', command=self.check_capacity)
        view_capacity_button.pack(pady=5)
        view_available_button = Button(self.window, text="Просмотреть свободный транспорт", font='Comfortaa 12',
                                       bg='#00ffff', command=self.preview_free_transport)
        view_available_button.pack(pady=5)
        view_booked_button = Button(self.window, text="Просмотреть забронированный транспорт", font='Comfortaa 12',
                                    bg='#00ffff', command=self.preview_booked_transport)
        view_booked_button.pack(pady=5)
        view_dimensions_button = Button(self.window, text="Просмотреть подходящий по габаритам транспорт",
                                        font='Comfortaa 12', bg='#00ffff', command=self.preview_transport_by_size)
        view_dimensions_button.pack(pady=5)

        book_button = Button(self.window, text="Забронировать транспорт", font='Comfortaa 12', bg='#00ffff',
                                command=self.transport_booking)
        book_button.pack(pady=5)
        delete_button = Button(self.window, text="Удалить транспорт", font='Comfortaa 12', bg='#00ffff',
                                  command=self.transport_delete)
        delete_button.pack(pady=5)
        self.window.protocol("WM_DELETE_WINDOW", self.on_closing)

    def clear_page(self):
        for widget in self.window.winfo_children():
            widget.destroy()

    def preview_transport_by_size(self):
        self.clear_page()

        Label(self.window, text="Грузоподъемность:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.capacity_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.capacity_entry.pack(pady=3)
        Label(self.window, text="Длина:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.length_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.length_entry.pack(pady=3)
        Label(self.window, text="Ширина:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.width_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.width_entry.pack(pady=3)
        Label(self.window, text="Высота:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.height_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.height_entry.pack(pady=3)
        view_button = Button(self.window, text="Подобрать транспорт", font='Comfortaa 12', bg='#00ffff',
                                command=self.view_transport)
        view_button.pack(pady=3)
        main_menu = Button(self.window, text="Главное меню", font='Comfortaa 12', bg='#00ffff',
                              command=self.create_buttons)
        main_menu.pack(pady=3)

    def view_transport(self):
        capacity_str = self.capacity_entry.get()
        length_str = self.length_entry.get()
        width_str = self.width_entry.get()
        height_str = self.height_entry.get()

        if capacity_str and length_str and width_str and height_str:
            try:
                capacity = float(capacity_str)
                length = float(length_str)
                width = float(width_str)
                height = float(height_str)
                self.manager.preview_transport_size(capacity, length, width, height)
            except ValueError:
                messagebox.showerror(title="Ошибка", message="Некорректные значения грузоподъемности или габаритов.")
        else:
            messagebox.showerror(title="Ошибка", message="Введите значения грузоподъемности и габаритов.")

    def check_capacity(self):
        self.clear_page()
        Label(self.window, text="Грузоподъемность:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.capacity_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.capacity_entry.pack(pady=3)
        view_capacity_button = Button(self.window, text="Просмотреть",
                                      font='Comfortaa 12', bg='#00ffff', command=self.preview_transport_capacity)
        view_capacity_button.pack(pady=3)
        add_button = Button(self.window, text="Главное меню", font='Comfortaa 12',
                               bg='#00ffff', command=self.create_buttons)
        add_button.pack(pady=3)

    def transport_delete(self):
        self.clear_page()
        Label(self.window, text="Введите ID транспорта:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.delete_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.delete_entry.pack(pady=3)

        delete_button = Button(self.window, text="Удалить", font='Comfortaa 12', bg='#00ffff',
                                  command=self.delete_transport)
        delete_button.pack(pady=3)
        add_button = Button(self.window, text="Главное меню", font='Comfortaa 12', bg='#00ffff',
                               command=self.create_buttons)
        add_button.pack(pady=3)

    def transport_booking(self):
        self.clear_page()
        Label(self.window, text="Введите ID транспорта:", font='Comfortaa 12', bg='#00ffff').pack(pady=3)
        self.booking_entry = Entry(self.window, font='Comfortaa 12', bg='#DCDCDC')
        self.booking_entry.pack(pady=3)
        book_button = Button(self.window, text="Забронировать", font='Comfortaa 12', bg='#00ffff',
                             command=self.booking)
        book_button.pack(pady=3)
        add_button = Button(self.window, text="Главное меню",  font='Comfortaa 12', bg='#00ffff',
                               command=self.create_buttons)
        add_button.pack(pady=3)

    def preview_add_transport(self):
        self.clear_page()
        Label(self.window, text="Название:", bg='#00ffff', font='Comfortaa 12').pack(pady=3)
        self.name_entry = Entry(self.window, bg='#DCDCDC')
        self.name_entry.pack(pady=3)

        Label(self.window, text="Грузоподъемность:", bg='#00ffff', font='Comfortaa 12').pack(pady=3)
        self.capacity_entry = Entry(self.window, bg='#DCDCDC')
        self.capacity_entry.pack(pady=3)
        Label(self.window, text="Длина:", bg='#00ffff', font='Comfortaa 12').pack(pady=3)
        self.length_entry = Entry(self.window, bg='#DCDCDC')
        self.length_entry.pack(pady=3)

        Label(self.window, text="Ширина:", bg='#00ffff', font='Comfortaa 12').pack(pady=3)
        self.width_entry = Entry(self.window, bg='#DCDCDC')
        self.width_entry.pack(pady=3)

        Label(self.window, text="Высота:", bg='#00ffff', font='Comfortaa 12').pack(pady=3)
        self.height_entry = Entry(self.window, bg='#DCDCDC')
        self.height_entry.pack(pady=3)

        add_button = Button(self.window, font='Comfortaa 12', text="Добавить", bg='#00ffff',
                               command=self.add_transport)
        add_button.pack(pady=3)
        add_button = Button(self.window, text="Главное меню", bg='#00ffff', command=self.create_buttons)
        add_button.pack(pady=3)

    def check_add_capacity(self):
        capacity_str = self.capacity_entry.get()
        if capacity_str:
            try:
                capacity = float(capacity_str)
                self.manager.preview_transport_capacity(capacity)
            except ValueError:
                messagebox.showerror(title="Ошибка", message="Некорректное значение грузоподъемности.")

    def on_closing(self):
        if messagebox.askokcancel(title="Выход", message="Вы точно хотите выйти?"):
            self.manager.close()
            self.window.destroy()

    def add_transport(self):
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showerror(title="Ошибка", message="Поле 'Название' не может быть пустым")
            return
        try:
            capacity = float(self.capacity_entry.get())
        except ValueError:
            messagebox.showerror(title="Ошибка", message="Некорректное значение в поле 'Грузоподъемность'")
            return
        try:
            length = float(self.length_entry.get())
        except ValueError:
            messagebox.showerror(title="Ошибка", message="Некорректное значение в поле 'Длина'")
            return
        try:
            width = float(self.width_entry.get())
        except ValueError:
            messagebox.showerror(title="Ошибка", message="Некорректное значение в поле 'Ширина'")
            return
        try:
            height = float(self.height_entry.get())
        except ValueError:
            messagebox.showerror(title="Ошибка", message="Некорректное значение в поле 'Высота'")
            return

        self.manager.add_tran(name, capacity, length, width, height)
        self.name_entry.delete(0, END)
        self.capacity_entry.delete(0, END)
        self.length_entry.delete(0, END)
        self.width_entry.delete(0, END)
        self.height_entry.delete(0, END)

    def delete_transport(self):
        transport_id_str = self.delete_entry.get()
        if transport_id_str:
            try:
                transport_id = int(transport_id_str)
                self.manager.delete_tran(transport_id)
                self.delete_entry.delete(0, END)
            except ValueError:
                messagebox.showerror(title="Ошибка", message="Некорректный идентификатор транспорта.")
        else:
            messagebox.showerror(title="Ошибка", message="Введите идентификатор транспорта.")

    def preview_all_transport(self):
        self.manager.preview_all_transport()

    def preview_transport_capacity(self):
        capacity_str = self.capacity_entry.get()
        if capacity_str:
            try:
                capacity = float(capacity_str)
                self.manager.preview_transport_capacity(capacity)
            except ValueError:
                messagebox.showerror(title="Ошибка", message="Некорректное значение грузоподъемности.")
        else:
            messagebox.showerror(title="Ошибка", message="Введите значение грузоподъемности.")

    def preview_free_transport(self):
        self.manager.preview_free_transport()

    def preview_booked_transport(self):
        self.manager.preview_booking_transport()

    def booking(self):
        transport_id_str = self.booking_entry.get()
        if transport_id_str:
            try:
                transport_id = int(transport_id_str)
                self.manager.booking(transport_id)
                self.booking_entry.delete(0, END)
            except ValueError:
                messagebox.showerror(title="Ошибка", message="Некорректный идентификатор транспорта.")
        else:
            messagebox.showerror(title="Ошибка", message="Введите идентификатор транспорта.")

    def close_window(self):
        self.manager.close()
        self.window.destroy()


if __name__ == "__main__":
    gui = MakeWindow()
    gui.create_buttons()
    mainloop()
